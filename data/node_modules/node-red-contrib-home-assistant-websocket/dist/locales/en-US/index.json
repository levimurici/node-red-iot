{
	"api-call-service": {
		"label": {
			"alternate_tags": "Use alternate template tags for the data field",
			"area": "Area",
			"data": "Data",
			"device": "Device",
			"domain": "Domain",
			"entity": "Entity",
			"load_example_data": "Load example data",
			"merge_context": "Merge context",
			"queue": "Queue",
			"queue_all": "all messages",
			"queue_first": "first message only",
			"queue_last": "last message only",
			"queue_none": "don't queue messages",
			"service": "Service",
			"show_debug": "Show debug information"
		},
		"error": {
			"invalid_entity_id": "Invalid entity id format"
		}
	},
	"home-assistant": {
		"error": {
			"cannot_connect": "Cannot connect to Home Assistant server",
			"connection_lost": "connection lost",
			"hass_host_required": "Base URL not set in server config",
			"invalid_auth": "Invalid access token for websocket",
			"user_not_admin": "User required to have admin privileges in Home Assistant"
		},
		"label": {
			"cancel": "Cancel",
			"done": "Done",
			"entity": "Entity",
			"entity_config": "Entity config",
			"entity_id": "Entity ID",
			"filter_results_label": "Filter",
			"filter_results_title": "Filter results",
			"for": "For",
			"if_state": "If state",
			"label": "Label",
			"name": "Name",
			"no_matches_found": "No matches found",
			"output_debug": "Output debug information",
			"output_on_connect": "Output on connect",
			"output_properties": "Output properties",
			"select_option": {
				"boolean": "boolean",
				"days": "days",
				"exact": "exact",
				"greater_than": ">",
				"greater_than_equal": ">=",
				"hours": "hours",
				"in": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_equal": "<=",
				"list": "list",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"not_in": "not in",
				"number": "number",
				"regex": "regex",
				"seconds": "seconds",
				"string": "string",
				"substring": "substring"
			},
			"server": "Server",
			"state_type": "State type",
			"test": "Test"
		},
		"ui": {
			"migrations": {
				"all_nodes_updated": "Home Assistant nodes have been updated. Deploy to save changes.",
				"button_cancel": "Cancel",
				"button_label": "Update Home Assistant Nodes",
				"button_ok": "Update Nodes",
				"message": "This will update all Home Assistant nodes to the current schema. This is not required for the nodes to function.\nNodes with yellow labels need to be updated before they can be edited. This can be done by either opening each node individually in the Node-RED editor or running this command.",
				"node_schema_updated": "Node schema has been updated",
				"title": "Update Home Assistant Nodes",
				"warning": "It is recommended to back up your flows before doing an update of all Home Assistant nodes."
			},
			"notifications": {
				"attention": "Attention"
			}
		}
	},
	"config-server": {
		"errors": {
			"empty_base_url": "Home Assistant base URL needs to be set",
			"invalid_base_url": "Invalid base URL for Home Assistant: [__url__]",
			"invalid_protocol": "Home Assistnat base URL needs to begin with http:// or https://",
			"no_server_selected": "No server selected and deployed.",
			"server_deploy": "Deploy a valid server config for autocomplete to show results."
		},
		"label": {
			"accept_all_certs": "Accept Unauthorized SSL Certificates",
			"access_token": "Access token",
			"area_selector": "Area Selector",
			"base_url": "Base URL",
			"cache_autocomplete_results": "Cache autocomplete results",
			"delay_connection_attempts": "Delay connection attempts",
			"device_selector": "Device Selector",
			"enable_heartbeat": "Enable heartbeat",
			"entity_selector": "Entity Selector",
			"friendly_name": "friendly name",
			"heartbeat_interval": "Heartbeat interval",
			"id": "ID",
			"id_selector": "ID Selector",
			"seconds": "Seconds",
			"state_boolean_list": "State boolean",
			"status": {
				"12_hour_format": "12-hour format",
				"24_hour_format": "24-hour format",
				"day": "Day",
				"default": "default",
				"hidden": "hidden",
				"hour_cycle": "Hour cycle",
				"long": "long",
				"month": "Month",
				"numeric": "numeric",
				"separator": "Separator",
				"short": "short",
				"time_format": "Time format",
				"title": "Status date format",
				"two_digit": "2-digit",
				"year": "Year"
			},
			"ui_settings": "UI Settings",
			"using_add_on": "Using the Home Assistant Add-on"
		},
		"status": {
			"connected": "connected",
			"connecting": "connecting",
			"disabled": "DISABLED",
			"disconnected": "disconnected",
			"error": "error",
			"registered": "registered",
			"running": "running",
			"triggered": "triggered"
		}
	},
	"ha-device": {
		"label": {
			"name": "Name",
			"server": "Server",
			"type": "Type",
			"trigger": "Trigger",
			"action": "Action",
			"device": "Device",
			"seconds": "seconds",
			"minutes": "minutes",
			"hours": "hours"
		},
		"error": {
			"invalid_device_config": "Invalid config for device trigger",
			"unknown_field_type": "Unknown field type: __type__",
			"report": "Report"
		},
		"ui": {
			"no_area": "No Area"
		}
	},
	"ha-entity-config": {
		"label": {
			"type": "type",
			"name": "friendly name",
			"icon": "icon",
			"device_class": "device class",
			"unit_of_measurement": "unit of measurement",
			"state_class": "state class",
			"last_reset": "last reset",
			"button": "button",
			"select_option": {
				"restart": "restart",
				"update": "update"
			}
		}
	},
	"ha-entity": {
		"label": {
			"name": "Name",
			"server": "Server",
			"type": "Type",
			"state": "State",
			"output_location": "Output Location",
			"input_override": "Input Override",
			"resend": "Resend state and attributes",
			"on_state_change": "Output on state change",
			"payload": "Payload",
			"debug": "Show Debug Information"
		}
	},
	"get-history": {
		"error": {
			"invalid_relative_time": "Invalid relative time"
		}
	},
	"poll-state": {
		"errors": {
			"jsonata_error": "JSONata Error: __message__",
			"interval_nan": "Offset is not a number: __offset__"
		}
	},
	"server-state-changed": {
		"label": {
			"ignore_current_state_unavailable": "Current state is unavailable",
			"ignore_current_state_unknown": "Current state is unknown",
			"ignore_header": "Ignore state change event when:",
			"ignore_prev_state_null": "Previous state doesn't exist",
			"ignore_prev_state_unavailable": "Previous state is unavailable",
			"ignore_prev_state_unknown": "Previous state is unknown",
			"output_on_connect": "Output on Connect",
			"output_only_on_state_change": "Current state equals previous state"
		}
	},
	"ha-tag": {
		"errors": {
			"no_tags_found": "No tags found in Home Assistant"
		},
		"label": {
			"all_tags": "ALL TAGS",
			"device_id": "Device ID",
			"devices": "Devices",
			"tag": "Tag",
			"tags": "Tags",
			"update_tag_list": "update tag list"
		}
	},
	"ha-time": {
		"errors": {
			"invalid_jsonata_payload": "Invalid jsonata sending entity state as payload",
			"jsonata_error": "JSONata Error: __message__",
			"offset_nan": "Offset is not a number: __offset__"
		},
		"status": {
			"in_the_past": "In the past",
			"invalid_date": "Invalid date",
			"invalid_property": "Invalid property",
			"next_at": "Next at __nextTime__",
			"no_days_selected": "Select at least one day of the week",
			"sent": "Sent",
			"sent_and_next": "Sent at __sentTime__ Next at __nextTime__",
			"unavailable": "Unavailable",
			"error": "Error"
		},
		"label": {
			"name": "Name",
			"server": "Server",
			"entity_id": "Entity Id",
			"property": "Property",
			"offset": "Offset",
			"seconds": "seconds",
			"minutes": "minutes",
			"hours": "hours",
			"randomize_offset": "Randomize time within the offset",
			"payload": "Payload",
			"repeat_daily": "Repeat Daily",
			"monday": "Monday",
			"tuesday": "Tuesday",
			"wednesday": "Wednesday",
			"thursday": "Thursday",
			"friday": "Friday",
			"saturday": "Saturday",
			"sunday": "Sunday"
		}
	},
	"trigger-state": {
		"label": {
			"conditions": "Conditions",
			"enable_input": "Enable input",
			"output_on_connect": "Output on connect",
			"select_option": {
				"always": "send always",
				"current_state": "current state",
				"custom_message": "custom message",
				"custom_payload": "custom payload",
				"default_message": "default message",
				"entity_id": "entity id",
				"if_prev_state": "If previous state",
				"if_property": "If property",
				"if_state": "If state",
				"previous_state": "previous state",
				"property": "property",
				"this_entity": "this entity"
			}
		}
	},
	"ha-wait-until": {
		"label": {
			"block_input_overrides": "Block input overrides",
			"check_current_state": "Check against current state",
			"entity_location": "Entity location",
			"timeout": "Timeout",
			"wait_until": "Wait until"
		}
	}
}