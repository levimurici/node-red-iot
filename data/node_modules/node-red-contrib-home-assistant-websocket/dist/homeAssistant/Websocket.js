"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const home_assistant_js_websocket_1 = require("home-assistant-js-websocket");
const lodash_1 = require("lodash");
const const_1 = require("../const");
const globals_1 = require("../globals");
const collections_1 = require("./collections");
const createSocket_1 = __importDefault(require("./createSocket"));
const heartbeat_1 = require("./heartbeat");
const debug = (0, debug_1.default)('home-assistant:ws');
class Websocket {
    constructor(config, eventBus) {
        this.config = config;
        this.eventBus = eventBus;
        this.servicesLoaded = false;
        this.statesLoaded = false;
        this.subscribedEvents = new Set();
        this.unsubCallback = {};
        this.areas = [];
        this.devices = [];
        this.entities = [];
        this.connectionState = const_1.STATE_DISCONNECTED;
        this.integrationVersion = 0;
        this.isHomeAssistantRunning = false;
        this.states = {};
        this.services = {};
        this.tags = null;
        this.eventBus.on('ha_client:connecting', this.onClientConnecting.bind(this));
        this.onStatesLoadedAndRunning('initial_connection_ready');
    }
    emitEvent(event, data) {
        return this.eventBus.emit(event, data);
    }
    async connect() {
        // Convert from http:// -> ws://, https:// -> wss://
        const url = `ws${this.config.host.substring(4)}/api/websocket`;
        const auth = {
            type: 'auth',
            access_token: this.config.access_token,
        };
        this.client = await (0, home_assistant_js_websocket_1.createConnection)({
            createSocket: () => (0, createSocket_1.default)({
                auth,
                connectionDelay: this.config.connectionDelay,
                eventBus: this.eventBus,
                rejectUnauthorizedCerts: this.config.rejectUnauthorizedCerts,
                url,
            }),
        }).catch((e) => {
            this.connectionState = const_1.STATE_ERROR;
            this.emitEvent('ha_client:error');
            // Handle connection errors
            let message;
            switch (e) {
                case home_assistant_js_websocket_1.ERR_CANNOT_CONNECT:
                    message = globals_1.RED._('home-assistant.error.cannot-connect');
                    break;
                case home_assistant_js_websocket_1.ERR_INVALID_AUTH:
                    message = globals_1.RED._('home-assistant.error.invalid_auth');
                    break;
                case home_assistant_js_websocket_1.ERR_CONNECTION_LOST:
                    message = globals_1.RED._('home-assistant.error.connection_lost');
                    break;
                case home_assistant_js_websocket_1.ERR_HASS_HOST_REQUIRED:
                    message = globals_1.RED._('home-assistant.error.hass_host_required');
                    break;
                case home_assistant_js_websocket_1.ERR_INVALID_HTTPS_TO_HTTP:
                    message = 'ERR_INVALID_HTTPS_TO_HTTP';
                    break;
            }
            throw message ? new Error(message) : e;
        });
        // Check if user has admin privileges
        await this.checkUserType();
        this.onClientOpen();
        // emit connected for only the first connection to the server
        // so we can setup certain things only once like registerEvents
        this.emitEvent('ha_client:connected');
        this.clientEvents();
        this.haEvents();
    }
    async checkUserType() {
        const user = await this.getUser();
        if (user.is_admin === false) {
            this.connectionState = const_1.STATE_ERROR;
            this.client.close();
            throw new Error(globals_1.RED._('home-assistant.error.user_not_admin'));
        }
    }
    getUser() {
        return (0, home_assistant_js_websocket_1.getUser)(this.client);
    }
    clientEvents() {
        // Client events
        this.client.addEventListener('ready', this.onClientOpen.bind(this));
        this.client.addEventListener('disconnected', this.onClientClose.bind(this));
        this.client.addEventListener('reconnect-error', this.onClientError.bind(this));
    }
    async haEvents() {
        // Home Assistant Events
        await this.client.subscribeEvents((evt) => this.integrationEvent(evt), const_1.HA_EVENT_INTEGRATION);
        (0, home_assistant_js_websocket_1.subscribeConfig)(this.client, (config) => this.onClientConfigUpdate(config));
        (0, home_assistant_js_websocket_1.subscribeEntities)(this.client, this.onClientStates.bind(this));
        (0, home_assistant_js_websocket_1.subscribeServices)(this.client, this.onClientServices.bind(this));
        (0, collections_1.subscribeAreaRegistry)(this.client, (areas) => {
            this.emitEvent(const_1.HA_EVENT_AREA_REGISTRY_UPDATED, areas);
            this.areas = areas;
        });
        (0, collections_1.subscribeDeviceRegistry)(this.client, (devices) => {
            this.emitEvent(const_1.HA_EVENT_DEVICE_REGISTRY_UPDATED, devices);
            this.devices = devices;
            this.emitEvent(const_1.HA_EVENT_REGISTRY_UPDATED, {
                devices: this.devices,
                entities: this.entities,
            });
        });
        (0, collections_1.subscribeEntityRegistry)(this.client, (entities) => {
            this.entities = entities;
            this.emitEvent(const_1.HA_EVENT_REGISTRY_UPDATED, {
                devices: this.devices,
                entities: this.entities,
            });
        });
    }
    onHomeAssistantRunning() {
        if (!this.isHomeAssistantRunning) {
            this.isHomeAssistantRunning = true;
            this.emitEvent('ha_client:running');
            if (this.integrationVersion === 0) {
                this.createIntegrationEvent(const_1.INTEGRATION_NOT_LOADED);
            }
        }
    }
    integrationEvent(evt) {
        var _a, _b;
        const oldVersion = this.integrationVersion;
        switch ((_a = evt === null || evt === void 0 ? void 0 : evt.data) === null || _a === void 0 ? void 0 : _a.type) {
            case const_1.INTEGRATION_LOADED:
                this.integrationVersion = evt.data.version;
                break;
            case const_1.INTEGRATION_UNLOADED:
                this.integrationVersion = 0;
                break;
            case const_1.INTEGRATION_NOT_LOADED:
                this.emitEvent(const_1.INTEGRATION_EVENT, evt.data.type);
                return;
        }
        if (oldVersion !== this.integrationVersion) {
            this.emitEvent(const_1.INTEGRATION_EVENT, (_b = evt === null || evt === void 0 ? void 0 : evt.data) === null || _b === void 0 ? void 0 : _b.type);
        }
    }
    async subscribeEvents(events) {
        const currentEvents = new Set(Object.values(events));
        // If events contains '__ALL__' register all events and skip individual ones
        if (currentEvents.has('__ALL__')) {
            if (this.subscribedEvents.has('__ALL__')) {
                // Nothing to do
                return;
            }
            this.subscribedEvents.forEach((e) => {
                if (e !== '__ALL__') {
                    this.unsubCallback[e]();
                    delete this.unsubCallback[e];
                    this.subscribedEvents.delete(e);
                }
            });
            // subscribe to all event and save unsubscribe callback
            this.unsubCallback.__ALL__ =
                await this.client.subscribeEvents((ent) => this.onClientEvents(ent));
            this.subscribedEvents.add('__ALL__');
            return;
        }
        // Always need the state_changed event
        currentEvents.add(const_1.HA_EVENT_STATE_CHANGED);
        currentEvents.add(const_1.HA_EVENT_TAG_SCANNED);
        const add = new Set([...currentEvents].filter((x) => !this.subscribedEvents.has(x)));
        const remove = new Set([...this.subscribedEvents].filter((x) => !currentEvents.has(x)));
        // Create new subscription list
        this.subscribedEvents = new Set([
            ...[...currentEvents].filter((x) => this.subscribedEvents.has(x)),
            ...add,
        ]);
        // Remove unused subscriptions
        remove.forEach((e) => {
            this.unsubCallback[e]();
            delete this.unsubCallback[e];
        });
        // Subscribe to each event type and save each unsubscribe callback
        for (const type of add) {
            this.unsubCallback[type] =
                await this.client.subscribeEvents((ent) => this.onClientEvents(ent), type);
        }
    }
    subscribeMessage(callback, subscribeMessage, options) {
        return this.client.subscribeMessage(callback, subscribeMessage, options);
    }
    onClientStates(entities) {
        if (!entities || Object.keys(entities).length === 0) {
            return;
        }
        this.states = entities;
        if (!this.statesLoaded) {
            this.statesLoaded = true;
            this.emitEvent('ha_client:states_loaded', this.states);
        }
    }
    onClientServices(services) {
        if (!services || Object.keys(services).length === 0) {
            return;
        }
        this.services = services;
        this.emitEvent(const_1.HA_EVENT_SERVICES_UPDATED, this.services);
        if (!this.servicesLoaded) {
            this.servicesLoaded = true;
            this.emitEvent('ha_client:services_loaded');
        }
    }
    onStatesLoadedAndRunning(event = 'ready') {
        const statesLoaded = new Promise((resolve) => {
            this.eventBus.once('ha_client:states_loaded', resolve);
        });
        const homeAssinstantRunning = new Promise((resolve) => {
            this.eventBus.once('ha_client:running', resolve);
        });
        Promise.all([statesLoaded, homeAssinstantRunning]).then(([states]) => {
            this.eventBus.emit(`ha_client:${event}`, states);
        });
    }
    onClientEvents(hassEvent) {
        var _a, _b;
        if (!hassEvent || !hassEvent.data) {
            return;
        }
        const eventType = hassEvent.event_type;
        const entityId = (_a = hassEvent === null || hassEvent === void 0 ? void 0 : hassEvent.data) === null || _a === void 0 ? void 0 : _a.entity_id;
        const event = {
            event_type: eventType,
            entity_id: entityId,
            event: hassEvent.data,
            origin: hassEvent.origin,
            time_fired: hassEvent.time_fired,
            context: hassEvent.context,
        };
        if (eventType === const_1.HA_EVENT_STATE_CHANGED) {
            const state = (_b = event === null || event === void 0 ? void 0 : event.event) === null || _b === void 0 ? void 0 : _b.new_state;
            // Validate a minimum state_changed event
            if (state && entityId) {
                this.states[entityId] = state;
            }
            else {
                debug(`Not processing ${const_1.HA_EVENT_STATE_CHANGED} event: ${JSON.stringify(event)}`);
                return;
            }
        }
        // Emit on the event type channel
        if (eventType) {
            this.emitEvent(`${const_1.HA_EVENTS}:${eventType}`, event);
            // Most specific emit for event_type and entity_id
            if (entityId) {
                this.emitEvent(`${const_1.HA_EVENTS}:${eventType}:${entityId}`, event);
            }
        }
        // Emit on all channel
        this.emitEvent(`${const_1.HA_EVENTS}:all`, event);
    }
    async onClientConfigUpdate(config) {
        if (config.components.includes('nodered') &&
            this.integrationVersion === 0) {
            try {
                const version = await this.getIntegrationVersion();
                this.createIntegrationEvent(const_1.INTEGRATION_LOADED, version);
            }
            catch (e) { }
        }
        if (!this.tags && config.components.includes('tag')) {
            await this.updateTagList();
        }
        // Prior to HA 0.111.0 state didn't exist
        if (config.state === undefined || config.state === 'RUNNING') {
            this.onHomeAssistantRunning();
        }
    }
    async updateTagList() {
        var _a;
        try {
            this.tags = await this.send({
                type: 'tag/list',
            });
        }
        catch (e) {
            debug(`Error fetching tag list: ${e}`);
        }
        return (_a = this.tags) !== null && _a !== void 0 ? _a : [];
    }
    getIntegrationVersion() {
        return this.send({
            type: 'nodered/version',
        });
    }
    createIntegrationEvent(type, version) {
        this.integrationEvent({
            data: { type, version },
        });
    }
    onClientOpen() {
        this.onStatesLoadedAndRunning();
        this.integrationVersion = 0;
        this.isHomeAssistantRunning = false;
        this.connectionState = const_1.STATE_CONNECTED;
        if (this.config.heartbeatInterval) {
            this.stopHeartbeat = (0, heartbeat_1.startHeartbeat)(this.client, this.config.heartbeatInterval, this.config.host);
        }
        this.emitEvent('ha_client:open');
    }
    onClientClose() {
        this.integrationVersion = 0;
        this.isHomeAssistantRunning = false;
        this.connectionState = const_1.STATE_DISCONNECTED;
        this.resetClient();
        debug('events connection closed, cleaning up connection');
        this.emitEvent('ha_client:close');
    }
    onClientError(data) {
        debug('events connection error, cleaning up connection');
        debug(data);
        this.emitEvent('ha_client:error', data);
        this.resetClient();
    }
    onClientConnecting() {
        this.connectionState = const_1.STATE_CONNECTING;
    }
    close() {
        var _a;
        if (typeof this.stopHeartbeat === 'function')
            this.stopHeartbeat();
        (_a = this === null || this === void 0 ? void 0 : this.client) === null || _a === void 0 ? void 0 : _a.close();
    }
    resetClient() {
        this.servicesLoaded = false;
        this.statesLoaded = false;
        this.connectionState = const_1.STATE_DISCONNECTED;
        this.emitEvent('ha_client:close');
    }
    getDevices() {
        return this.devices;
    }
    async getDeviceActions(deviceId) {
        if (!deviceId)
            return [];
        return this.send({
            type: 'device_automation/action/list',
            device_id: deviceId,
        });
    }
    async getDeviceActionCapabilities(action) {
        if (!action)
            return [];
        const results = await this.send({
            type: 'device_automation/action/capabilities',
            action,
        });
        return results.extra_fields;
    }
    async getDeviceTriggers(deviceId) {
        if (!deviceId)
            return [];
        return this.send({
            type: 'device_automation/trigger/list',
            device_id: deviceId,
        });
    }
    async getDeviceTriggerCapabilities(trigger) {
        if (!trigger)
            return [];
        const results = await this.send({
            type: 'device_automation/trigger/capabilities',
            trigger,
        });
        return results.extra_fields;
    }
    getStates(entityId) {
        if (entityId) {
            return this.states[entityId]
                ? (0, lodash_1.cloneDeep)(this.states[entityId])
                : null;
        }
        return (0, lodash_1.cloneDeep)(this.states);
    }
    getServices() {
        return (0, lodash_1.cloneDeep)(this.services);
    }
    async getTranslations(category, language) {
        if (!category)
            return [];
        const results = await this.send({
            type: 'frontend/get_translations',
            language,
            category,
        });
        return results.resources;
    }
    callService(domain, service, data, target) {
        debug(`Call-Service: ${domain}.${service} ${JSON.stringify(data)}`);
        return (0, home_assistant_js_websocket_1.callService)(this.client, domain, service, data, target);
    }
    send(data) {
        debug(`Send: ${JSON.stringify(data)}`);
        return this.client.sendMessagePromise(data);
    }
}
exports.default = Websocket;
