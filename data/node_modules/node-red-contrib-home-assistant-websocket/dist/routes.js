"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRoutes = void 0;
const bonjour_1 = __importDefault(require("bonjour"));
const flat_1 = __importDefault(require("flat"));
const globals_1 = require("./globals");
function disableCache(req, res, next) {
    var _a;
    const node = globals_1.RED.nodes.getNode(req.params.id);
    if (((_a = node === null || node === void 0 ? void 0 : node.config) === null || _a === void 0 ? void 0 : _a.cacheJson) === false) {
        res.setHeader('Surrogate-Control', 'no-store');
        res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');
        res.setHeader('Pragma', 'no-cache');
        res.setHeader('Expires', '0');
    }
    next();
}
function checkHomeAssistant(req, res, next) {
    const homeAssistant = getHomeAssistant(req.params.serverId);
    if (!homeAssistant) {
        const errorMessage = globals_1.RED._('config-server.errors.no_server_selected');
        res.status(503).send({ error: errorMessage });
    }
    else {
        next();
    }
}
async function getDeviceActions(req, res) {
    var _a;
    const deviceId = (_a = req.query.deviceId) === null || _a === void 0 ? void 0 : _a.toString();
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const actions = await (homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getDeviceActions(deviceId));
    res.json(actions !== null && actions !== void 0 ? actions : []);
}
async function getDeviceActionCapabilities(req, res) {
    const action = req.query.action;
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const capabilities = await (homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getDeviceActionCapabilities(action));
    res.json(capabilities !== null && capabilities !== void 0 ? capabilities : []);
}
async function getDeviceTriggers(req, res) {
    var _a;
    const deviceId = (_a = req.query.deviceId) === null || _a === void 0 ? void 0 : _a.toString();
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const triggers = await (homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getDeviceTriggers(deviceId));
    res.json(triggers !== null && triggers !== void 0 ? triggers : []);
}
async function getDeviceTriggerCapabilities(req, res) {
    const trigger = req.query.trigger;
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const capabilities = await (homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getDeviceTriggerCapabilities(trigger));
    res.json(capabilities !== null && capabilities !== void 0 ? capabilities : []);
}
function getEntities(req, res) {
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const states = homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.getEntities();
    res.json(states !== null && states !== void 0 ? states : []);
}
function getStates(req, res) {
    var _a;
    const entityId = (_a = req.query.entityId) === null || _a === void 0 ? void 0 : _a.toString();
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const states = homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getStates(entityId);
    res.json(states !== null && states !== void 0 ? states : []);
}
function getServices(req, res) {
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const services = homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getServices();
    res.json(services !== null && services !== void 0 ? services : []);
}
function getProperties(req, res) {
    var _a;
    let flat = [];
    let singleEntity = !!req.query.entityId;
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const entityId = (_a = req.query.entityId) === null || _a === void 0 ? void 0 : _a.toString();
    let states = homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getStates(entityId);
    if (!states) {
        states = homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getStates();
        singleEntity = false;
    }
    if (singleEntity) {
        flat = Object.keys((0, flat_1.default)(states)).filter((e) => { var _a; return ((_a = req === null || req === void 0 ? void 0 : req.query) === null || _a === void 0 ? void 0 : _a.term) && e.indexOf(req.query.term.toString()) !== -1; });
    }
    else {
        flat = Object.values(states).map((entity) => Object.keys((0, flat_1.default)(entity)));
    }
    const uniqProperties = Array.from(new Set([].concat(...flat)));
    const sortedProperties = uniqProperties.sort((a, b) => {
        if (!a.includes('.') && b.includes('.'))
            return -1;
        if (a.includes('.') && !b.includes('.'))
            return 1;
        if (a < b)
            return -1;
        if (a > b)
            return 1;
        return 0;
    });
    res.json(sortedProperties);
}
async function getTags(req, res) {
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const tags = req.query.update
        ? await (homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.updateTagList())
        : homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.getTags();
    tags === null || tags === void 0 ? void 0 : tags.map((t) => {
        return {
            id: t.tag_id,
            name: t.name,
        };
    });
    res.json(tags !== null && tags !== void 0 ? tags : []);
}
async function getTranslations(req, res) {
    var _a, _b, _c;
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const category = (_a = req.query.cat) === null || _a === void 0 ? void 0 : _a.toString();
    const language = (_c = (_b = req.query.lang) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'en';
    if (!category) {
        res.json({});
        return;
    }
    const results = await (homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.websocket.getTranslations(category, language));
    res.json(results !== null && results !== void 0 ? results : []);
}
function getIntegrationVersion(req, res) {
    var _a;
    const homeAssistant = getHomeAssistant(req.params.serverId);
    const data = { version: (_a = homeAssistant === null || homeAssistant === void 0 ? void 0 : homeAssistant.integrationVersion) !== null && _a !== void 0 ? _a : 0 };
    res.json(data);
}
function getHomeAssistant(nodeId) {
    var _a;
    const node = globals_1.RED.nodes.getNode(nodeId);
    return (_a = node === null || node === void 0 ? void 0 : node.controller) === null || _a === void 0 ? void 0 : _a.homeAssistant;
}
function findServers(req, res) {
    const instances = [];
    const browser = (0, bonjour_1.default)().find({ type: 'home-assistant' }, (service) => {
        instances.push({
            label: service.name
                ? `${service.name} (${service.txt.base_url})`
                : service.txt.base_url,
            value: service.txt.base_url,
        });
    });
    // Add a bit of delay for all services to be discovered
    setTimeout(() => {
        res.json(instances);
        browser.stop();
    }, 3000);
}
function createRoutes() {
    const endpoints = {
        deviceActions: getDeviceActions,
        deviceActionCapabilities: getDeviceActionCapabilities,
        deviceTriggers: getDeviceTriggers,
        deviceTriggerCapabilities: getDeviceTriggerCapabilities,
        entities: getEntities,
        properties: getProperties,
        services: getServices,
        states: getStates,
        tags: getTags,
        translations: getTranslations,
    };
    Object.entries(endpoints).forEach(([key, value]) => globals_1.RED.httpAdmin.get(`/homeassistant/${key}/:serverId?`, globals_1.RED.auth.needsPermission('server.read'), disableCache, checkHomeAssistant, value));
    globals_1.RED.httpAdmin.get(`/homeassistant/version/:serverId`, globals_1.RED.auth.needsPermission('server.read'), checkHomeAssistant, getIntegrationVersion);
    globals_1.RED.httpAdmin.get('/homeassistant/discover', findServers);
}
exports.createRoutes = createRoutes;
