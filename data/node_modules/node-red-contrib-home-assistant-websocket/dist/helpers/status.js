"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwitchEntityStatus = exports.EventsStatus = exports.Status = exports.STATUS_SHAPE_RING = exports.STATUS_SHAPE_DOT = exports.STATUS_COLOR_YELLOW = exports.STATUS_COLOR_RED = exports.STATUS_COLOR_GREY = exports.STATUS_COLOR_GREEN = exports.STATUS_COLOR_BLUE = void 0;
const const_1 = require("../const");
const globals_1 = require("../globals");
const date_1 = require("./date");
exports.STATUS_COLOR_BLUE = 'blue';
exports.STATUS_COLOR_GREEN = 'green';
exports.STATUS_COLOR_GREY = 'grey';
exports.STATUS_COLOR_RED = 'red';
exports.STATUS_COLOR_YELLOW = 'yellow';
exports.STATUS_SHAPE_DOT = 'dot';
exports.STATUS_SHAPE_RING = 'ring';
class Status {
    constructor(node) {
        var _a, _b;
        this.node = node;
        this.isNodeDisabled = false;
        this.lastStatus = {};
        const serverId = (_b = (_a = this.node) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.server;
        const server = globals_1.RED.nodes.getNode(serverId);
        this.serverConfig = server === null || server === void 0 ? void 0 : server.config;
    }
    // eslint-disable-next-line no-empty-pattern, @typescript-eslint/no-empty-function
    init({} = {}) { }
    setNodeState(value) {
        if (this.isNodeDisabled === value) {
            this.isNodeDisabled = !value;
            this.updateStatus(this.lastStatus);
        }
    }
    set(status = {}) {
        if (this.isNodeDisabled === false) {
            this.lastStatus = status;
        }
        this.updateStatus(status);
    }
    setText(text = '') {
        this.set({ text });
    }
    setSuccess(text = 'Success') {
        this.set({
            fill: exports.STATUS_COLOR_GREEN,
            shape: exports.STATUS_SHAPE_DOT,
            text: this.appendDateString(text),
        });
    }
    setSending(text = 'Sending') {
        this.set({
            fill: exports.STATUS_COLOR_YELLOW,
            shape: exports.STATUS_SHAPE_DOT,
            text: this.appendDateString(text),
        });
    }
    setFailed(text = 'Failed') {
        this.set({
            fill: exports.STATUS_COLOR_RED,
            shape: exports.STATUS_SHAPE_RING,
            text: this.appendDateString(text),
        });
    }
    updateStatus(status) {
        if (this.isNodeDisabled) {
            status = {
                fill: exports.STATUS_COLOR_GREY,
                shape: exports.STATUS_SHAPE_DOT,
                text: 'config-server.status.disabled',
            };
        }
        this.node.status(status);
    }
    appendDateString(text) {
        var _a, _b;
        const separator = (_b = (_a = this.serverConfig) === null || _a === void 0 ? void 0 : _a.statusSeparator) !== null && _b !== void 0 ? _b : '';
        const dateString = (0, date_1.formatDate)({
            options: this.statusOptions(),
        });
        return `${text} ${separator}${dateString}`;
    }
    statusOptions() {
        var _a, _b, _c;
        const config = this.serverConfig;
        const options = {
            year: (config === null || config === void 0 ? void 0 : config.statusYear) === 'hidden'
                ? undefined
                : config === null || config === void 0 ? void 0 : config.statusYear,
            month: (config === null || config === void 0 ? void 0 : config.statusMonth) === 'hidden'
                ? undefined
                : (_a = config === null || config === void 0 ? void 0 : config.statusMonth) !== null && _a !== void 0 ? _a : 'short',
            day: (config === null || config === void 0 ? void 0 : config.statusDay) === 'hidden'
                ? undefined
                : (_b = config === null || config === void 0 ? void 0 : config.statusDay) !== null && _b !== void 0 ? _b : 'numeric',
            hourCycle: (config === null || config === void 0 ? void 0 : config.statusHourCycle) === 'default'
                ? undefined
                : (_c = config === null || config === void 0 ? void 0 : config.statusHourCycle) !== null && _c !== void 0 ? _c : 'h23',
            hour: 'numeric',
            minute: 'numeric',
        };
        switch (config === null || config === void 0 ? void 0 : config.statusTimeFormat) {
            case 'h:m:s':
                options.second = 'numeric';
                break;
            case 'h:m:s.ms':
                options.second = 'numeric';
                options.fractionalSecondDigits = 3;
                break;
        }
        return options;
    }
}
exports.Status = Status;
class EventsStatus extends Status {
    constructor() {
        super(...arguments);
        this.connectionState = const_1.STATE_DISCONNECTED;
        this.eventListeners = [];
    }
    init({ nodeState, homeAssistant, }) {
        if (nodeState !== undefined) {
            this.isNodeDisabled = !nodeState;
        }
        if (homeAssistant) {
            this.enableConnectionStatus(homeAssistant);
        }
    }
    enableConnectionStatus(homeAssistant) {
        // Setup event listeners
        const events = {
            'ha_client:close': this.onClientClose,
            'ha_client:connecting': this.onClientConnecting,
            'ha_client:error': this.onClientError,
            'ha_client:open': this.onClientOpen,
            'ha_client:running': this.onClientRunning,
        };
        Object.entries(events).forEach(([event, callback]) => {
            this.eventListeners.push(() => homeAssistant.removeListener(event, callback));
            homeAssistant.addListener(event, callback.bind(this));
        });
    }
    onClientClose() {
        this.connectionState = const_1.STATE_DISCONNECTED;
        this.updateConnectionStatus();
    }
    onClientConnecting() {
        this.connectionState = const_1.STATE_CONNECTING;
        this.updateConnectionStatus();
    }
    onClientError() {
        this.connectionState = const_1.STATE_ERROR;
        this.updateConnectionStatus();
    }
    onClientOpen() {
        this.connectionState = const_1.STATE_CONNECTED;
        this.updateConnectionStatus();
    }
    onClientRunning() {
        this.connectionState = const_1.STATE_RUNNING;
        this.updateConnectionStatus();
    }
    updateConnectionStatus() {
        const status = this.getConnectionStatus();
        this.updateStatus(status);
    }
    getConnectionStatus() {
        const status = {
            fill: exports.STATUS_COLOR_RED,
            shape: exports.STATUS_SHAPE_RING,
            text: 'config-server.status.disconnected',
        };
        switch (this.connectionState) {
            case const_1.STATE_CONNECTED:
                status.fill = exports.STATUS_COLOR_GREEN;
                status.text = 'config-server.status.connected';
                break;
            case const_1.STATE_CONNECTING:
                status.fill = exports.STATUS_COLOR_YELLOW;
                status.text = 'config-server.status.connecting';
                break;
            case const_1.STATE_ERROR:
                status.text = 'config-server.status.error';
                break;
            case const_1.STATE_RUNNING:
                status.fill = exports.STATUS_COLOR_GREEN;
                status.text = 'config-server.status.running';
                break;
        }
        return status;
    }
    destroy() {
        this.eventListeners.forEach((callback) => callback());
    }
}
exports.EventsStatus = EventsStatus;
class SwitchEntityStatus extends Status {
    set({ fill = exports.STATUS_COLOR_YELLOW, shape = exports.STATUS_SHAPE_DOT, text = '', } = {}) {
        const status = {
            fill,
            shape,
            text,
        };
        super.set(status);
    }
    setNodeState(value) {
        this.isNodeDisabled = !value;
        const status = {
            fill: exports.STATUS_COLOR_YELLOW,
            shape: value ? exports.STATUS_SHAPE_DOT : exports.STATUS_SHAPE_RING,
            text: this.appendDateString(value ? 'on' : 'off'),
        };
        this.updateStatus(status);
    }
    updateStatus(status) {
        this.node.status(status);
    }
}
exports.SwitchEntityStatus = SwitchEntityStatus;
