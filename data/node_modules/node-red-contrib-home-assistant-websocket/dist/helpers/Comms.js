"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const const_1 = require("../const");
const globals_1 = require("../globals");
const convertSetToArray = (obj) => {
    const result = {};
    Object.keys(obj).forEach((key) => {
        result[key] = Array.from(obj[key]);
    });
    return result;
};
class Comms {
    constructor(homeAssistant, serverId) {
        this.homeAssistant = homeAssistant;
        this.serverId = serverId;
        this.startListeners();
    }
    startListeners() {
        // Setup event listeners
        const events = {
            [const_1.HA_EVENT_SERVICES_UPDATED]: this.onServicesUpdated,
            'ha_client:states_loaded': this.onStatesLoaded,
            'ha_events:state_changed': this.onStateChanged,
            integration: this.onIntegrationEvent,
            [const_1.HA_EVENT_AREA_REGISTRY_UPDATED]: this.onAreaRegistryUpdate,
            [const_1.HA_EVENT_DEVICE_REGISTRY_UPDATED]: this.onDeviceRegistryUpdate,
            [const_1.HA_EVENT_REGISTRY_UPDATED]: this.onRegistryUpdate,
        };
        Object.entries(events).forEach(([event, callback]) => this.homeAssistant.addListener(event, callback.bind(this)));
    }
    publish(type, data, retain = true) {
        globals_1.RED.comms.publish(`homeassistant/${type}/${this.serverId}`, data, retain);
    }
    onAreaRegistryUpdate(areas) {
        this.publish('areas', areas);
    }
    onDeviceRegistryUpdate(devices) {
        this.publish('devices', devices);
    }
    onRegistryUpdate({ devices, entities, }) {
        const areaDomains = {};
        const deviceDomains = {};
        entities.forEach((entity) => {
            if (entity.area_id) {
                if (!(entity.area_id in areaDomains)) {
                    areaDomains[entity.area_id] = new Set();
                }
                areaDomains[entity.area_id].add(entity.entity_id.split('.')[0]);
            }
            if (entity.device_id) {
                if (!(entity.device_id in deviceDomains)) {
                    deviceDomains[entity.device_id] = new Set();
                }
                deviceDomains[entity.device_id].add(entity.entity_id.split('.')[0]);
            }
        });
        devices.forEach((device) => {
            var _a;
            if (device.area_id) {
                if (!(device.area_id in areaDomains)) {
                    areaDomains[device.area_id] = new Set();
                }
                areaDomains[device.area_id] = new Set([
                    ...areaDomains[device.area_id],
                    ...((_a = deviceDomains[device.id]) !== null && _a !== void 0 ? _a : []),
                ]);
            }
        });
        this.publish('targetDomains', {
            areas: convertSetToArray(areaDomains),
            devices: convertSetToArray(deviceDomains),
        });
    }
    onIntegrationEvent(eventType) {
        this.publish('integration', {
            event: eventType,
            version: this.homeAssistant.integrationVersion,
        });
    }
    onServicesUpdated(services) {
        this.publish('services', services);
    }
    onStateChanged(event) {
        const entity = event.event.new_state;
        if (entity) {
            this.publish('entity', entity);
        }
    }
    onStatesLoaded(entities) {
        this.publish('entities', entities);
    }
}
exports.default = Comms;
