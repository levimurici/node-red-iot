"use strict";
/*
 * Modified from https://github.com/node-red/node-red/blob/master/nodes/core/core/80-template.js
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRenderTemplate = exports.renderTemplate = exports.containsMustache = void 0;
const mustache_1 = require("mustache");
const selectn_1 = __importDefault(require("selectn"));
function parseContext(key) {
    const match = /^(flow|global)(\[(\w+)\])?\.(.+)/.exec(key);
    if (match) {
        const parts = {
            type: match[1],
            store: match[3] === '' ? 'default' : match[3],
            field: match[4],
        };
        return parts;
    }
    return undefined;
}
/**
 * Custom Mustache Context capable to collect message property and node
 * flow and global context
 */
class CustomContext extends mustache_1.Context {
    constructor(view, parentContext, nodeContext, entities) {
        super(view, parentContext);
        this.nodeContext = nodeContext;
        this.entities = entities;
    }
    lookup(name) {
        var _a;
        // try message first:
        let value = super.lookup(name);
        if (value === undefined) {
            if (this.nodeContext) {
                // try flow/global context:
                const context = parseContext(name);
                if (context) {
                    const target = this.nodeContext[context.type];
                    if (target) {
                        try {
                            value = target.get(context.field, context.store);
                        }
                        catch (err) { }
                    }
                }
            }
            if (value === undefined && this.entities) {
                // try state entities
                // version 0.10.3 changed from states.domain.entity to entity.d.e
                const match = /^(?:states|entity)\.(\w+\.\w+)(?:\.(.+))?/.exec(name);
                if (match) {
                    const entityId = match[1];
                    const path = (_a = match[2]) !== null && _a !== void 0 ? _a : 'state';
                    value = (0, selectn_1.default)(path, this.entities[entityId]);
                }
            }
        }
        return value !== null && value !== void 0 ? value : '';
    }
    push(view) {
        return new CustomContext(view, this, this.nodeContext, this.entities);
    }
}
function containsMustache(str) {
    const regex = /{{(?:(?!}}).+)}}/g;
    return regex.test(str);
}
exports.containsMustache = containsMustache;
function containsAltMustache(str) {
    const regex = /<%(?:(?!%>).+)%>/g;
    return regex.test(str);
}
function renderTemplate(str, message, nodeContext, entities, altTags = false) {
    if (str &&
        ((altTags !== true && containsMustache(str)) ||
            (altTags === true && containsAltMustache(str)))) {
        return (0, mustache_1.render)(str, new CustomContext(message, undefined, nodeContext, entities), undefined, altTags === true ? ['<%', '%>'] : undefined);
    }
    return str !== null && str !== void 0 ? str : '';
}
exports.renderTemplate = renderTemplate;
function generateRenderTemplate(message, context, states) {
    return (template, altTags = false) => renderTemplate(template, message, context, states, altTags);
}
exports.generateRenderTemplate = generateRenderTemplate;
